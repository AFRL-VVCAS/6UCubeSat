--AADL2
--SAE Aerospace Standard AS5506B
--Appendix A: Predeclared Property Sets

property set AADL_Project is
	Supported_Active_Thread_Handling_Protocols: type enumeration (abort);
	
	Supported_Connection_Patterns: type enumeration (One_To_One, All_To_All, One_To_All, All_To_One,
			 Next, Previous, Cyclic_Next, Cyclic_Previous,
			 Odd_To_Odd, Even_To_Even, Next_Next, Cyclic_Next_Next, Previous_Previous, Cyclic_Previous_Previous);
	
	Supported_Concurrency_Control_Protocols: type enumeration (None_Specified, Interrupt_Masking, 
	                Maximum_Priority, Priority_Inheritance, Priority_Ceiling, Spin_Lock, Semaphore, Protected_Access);
	
	Supported_Dispatch_Protocols: type enumeration (Periodic, Sporadic, Aperiodic, Timed, Hybrid, Background);
	
	Supported_Queue_Processing_Protocols: type enumeration (Fifo);
	
	Supported_Hardware_Source_Languages: type enumeration (VHDL);
	
	Supported_Connection_QoS: type enumeration (GuaranteedDelivery, OrderedDelivery, SecureDelivery);
	
	Supported_Scheduling_Protocols: type enumeration (Static, Round_Robin_Protocol, POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL, FixedTimeline, Cooperative, RMS, EDF, SporadicServer, SlackServer, ARINC653);
	
	Supported_Source_Languages: type enumeration (Ada95, Ada2005, C, Java, Simulink_6_5);
	
	Supported_Distributions: type enumeration (Fixed, Poisson);
	
	Supported_Classifier_Substitutions: type enumeration (Classifier_Match, Type_Extension, Signature_Match);
	
	--The following four property constants support values which are lists of pairs of classifiers.  An example value could be the following:
	--		((classifier (pkg::a), classifier (pkg::b)), (classifier (pkg::c), classifier (pkg::d)), (classifier (pkg::e), classifier (pkg::f)))
	--The size of each inner list must be exactly two.  There are no restrictions on the size of the outer list.
	
	Supported_Classifier_Equivalence_Matches: constant list of list of classifier (data, bus, subprogram, subprogram group, feature group) => ();
	
	Supported_Classifier_Subset_Matches: constant list of list of classifier (data, bus, subprogram, subprogram group) => ();
	
	Supported_Type_Conversions: constant list of list of classifier (data, bus, subprogram, subprogram group) => ();
	
	Supported_Classifier_Complement_Matches: constant list of list of classifier (feature group) => ();
	
	Max_Aadlinteger: constant aadlinteger => 2#1#e32;
	
	Max_Target_Integer: constant aadlinteger => 2#1#e32;
	
	Max_Base_Address: constant aadlinteger => 2#1#e32;
	
	Max_Memory_Size: constant Size => 2#1#e32 Bytes;
	
	Max_Queue_Size: constant aadlinteger => 512;
	
	Max_Thread_Limit: constant aadlinteger => 32;
	
	Max_Time: constant Time => 1000 hr;
	
	Max_Urgency: constant aadlinteger => 12;
	
	Max_Byte_Count: constant aadlinteger => 2#1#e32;
	
	Max_Word_Space: constant aadlinteger => 64;
	
	Size_Units: type units (bits, Bytes => bits * 8, KByte => Bytes * 1000, MByte => KByte * 1000,
							GByte => MByte * 1000, TByte => GByte * 1000);
	
	Time_Units: type units (ps, ns => ps * 1000, us => ns * 1000, ms => us * 1000, sec => ms * 1000, min => sec * 60, hr => min * 60);

	Data_Rate_Units: type	units (bitsps, Bytesps => bitsps * 8, KBytesps => Bytesps * 1000, MBytesps => KBytesps * 1000, GBytesps => MBytesps * 1000);

	Data_Volume_Units: type	units (bitsps, Bytesps => bitsps * 8, KBytesps => Bytesps * 1000, MBytesps => KBytesps * 1000, GBytesps => MBytesps * 1000);
	Max_Volume: constant Data_Volume => 1000 GBytesps;

	Data_Volume: type aadlinteger 0 bitsps .. Max_Volume units Data_Volume_Units;

        -- Speed in terms of instructions executed per second
        Processor_Speed_Units: type units (KIPS, MIPS => KIPS * 1000, GIPS => MIPS * 1000);

end AADL_Project;